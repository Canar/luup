#!/usr/bin/env ruby
require 'open3'
require 'shellwords'
require 'io/console'
require 'pathname'
require 'pulseaudio_simple_ffi'
require 'pp'
require 'readline'

Pkg='luup'
Ver='0.0.0'
ConfigDir="#{Dir.home}/.config/#{Pkg}"
Dir.mkdir(ConfigDir) unless File.directory?(ConfigDir)

Channels,Rate,WordSize=2,44100,4
FrameSize=Channels*WordSize # "frame" is all channels of a sample
BytesPerSec=Rate*FrameSize
FfmpegFmt="-ac #{Channels} -ar #{Rate} -f f#{WordSize*8}le"
Quantum=24.0 # 24 FPS = cinematic

def frame_round(x) = ( ( x.to_i / FrameSize ).to_i * FrameSize ).to_i

ChunkSize=frame_round(BytesPerSec/Quantum/2)

def readline_hooked insert,prompt
  Readline.pre_input_hook = -> do
    Readline.insert_text insert
    Readline.redisplay
    Readline.pre_input_hook=nil
  end
  Readline.readline prompt
end

class Luup
  attr_reader :data,:pulse,:start_time,:len,:off,:out,:mode

  attr_reader :len_f,:off_f,:dis_f,:num_f
  attr_reader :len_byte,:off_byte,:start_byte,:curr_byte,:end_byte,:out_byte

  def initialize file,len_p,off_p='0',dis_p='0',num_p='1'
    fn=Shellwords.escape(file)
    print "decoding #{file}..."
    @data,st = Open3.capture2("ffmpeg -loglevel -8 -i #{fn} #{FfmpegFmt} -",binmode:true)
    puts ' done'
   
    self.num=num_p
    self.len=len_p

    self.dis=dis_p
    self.off=off_p ? off_p : `aubioquiet #{fn} | head -1 | cut -d\\  -f2`

    @start_time=Time.now.to_f
    @pulse=PulseAudioSimpleFFI::PulseAudioSimpleO.new(Pkg,file,channels:Channels,rate:Rate,device:@device)
    @mode=:play
    @curr_byte=start_byte
    @out_byte=0

    @out=Thread.new{
      until :quit == @mode
        if @curr_byte-1==end_byte
          @curr_byte=start_byte
        elsif frame_round( @curr_byte + ChunkSize - end_byte+1)>0
          extra_byte=frame_round( @curr_byte + ChunkSize - end_byte + 1)
          extra_end_byte=frame_round(start_byte+extra_byte)-1
          #puts "#{curr_byte} #{end_byte} #{start_byte} #{extra_byte} #{extra_end_byte} #{chunk_size}"
          @pulse.write data[@curr_byte .. end_byte]
          @pulse.write data[start_byte .. extra_end_byte]
          @out_byte+=(end_byte-@curr_byte+1)+(extra_end_byte-start_byte+1)
          @curr_byte=extra_end_byte+1
        else
          @pulse.write data[@curr_byte .. @curr_byte+ChunkSize-1]
          @curr_byte+=ChunkSize
          @out_byte+=ChunkSize
        end
        wrote_t,spent_t=out_byte.to_f/BytesPerSec,Time.now.to_f-@start_time
        #puts "#{wrote_t} in #{spent_t}"
        sleep (wrote_t-spent_t)/Quantum if (wrote_t>spent_t)
      end
      @pulse.close
    }
  end

  def len= x
    @len=x
    @len_f=x.to_f
    @len_byte=frame_round(@len_f*BytesPerSec*@num_f)
  end

  def off= x
    @off=x
    @off_f=x.to_f
    @off_byte=(@off_f*Rate).to_i*FrameSize + frame_round(@dis_f*@len_byte/@num_f)
  end

  def dis= x
    @dis=x
    @dis_f=x.to_f
    self.off=@off if @off
  end

  def num= x
    @num=x
    @num_f=x.to_f
    self.len=@len if @len
  end

  def start_byte
    @off_byte
  end

  def end_byte
    @off_byte + @len_byte - 1
  end

  def main
    until :quit == @mode
      d=end_byte-start_byte
      c=@curr_byte-start_byte
      n=(c*256/d).to_i
      #msg="%0.02f" % (curr_byte.to_f/BytesPerSec)
      msg="%02X" % n
      print "\r#{msg} l:#{@len} o:#{@off} n:#{@num} d:#{@dis}> "
      case ch=IO.console.raw{|c|c.read_nonblock(1) rescue ''}.downcase
      when 'q'
        @mode=:quit
        puts 'quit!'
      when 'o'
        new_off=readline_hooked(@off,"o:")
        if(new_off.to_f!=0)
          self.off=new_off
          @curr_byte=start_byte
        end
      when 'l'
        new_len=readline_hooked(@len,"l:")
        if(new_len.to_f>=5 and new_len.to_f<10)
          self.len=new_len
          @curr_byte=start_byte
        end
      when 'n'
        new_num=readline_hooked(@num,"n:")
        if(new_num.to_f>0)
          self.num=new_num
          @curr_byte=start_byte
        end
      when 'd'
        s=-(@off_f/@len_f)
        l=@data.length/BytesPerSec
        e=(l-@off_f)/@len_f
        new_dis=readline_hooked(@dis,"d=#{"%0.03f"%(s+0.0005)}-#{"%0.03f"%(e-0.0005)}:")
        if(new_dis.to_f>=s && new_dis.to_f<=e)
          self.dis=new_dis
          @curr_byte=start_byte
        end
      when ''
        sleep 1/Quantum
#      else
#        puts 'wtf'
        #print (help="#{ch} < #{list_i>0?"[P]rev ":""}[R]estart [S]eek [N]ext [Q]uit")
      end
    end
    puts "\r    ]  #{Pkg} ‚úù v#{Ver}  [    "
    @out.join
  end
end

if ARGV.length==0
  puts "Usage: #{Pkg} file"
  exit 1
end

main=Luup.new(file=Pathname(ARGV[0]).realpath.to_s,'7.7948','33.125')
data=main.data
o=main.pulse
main.main

